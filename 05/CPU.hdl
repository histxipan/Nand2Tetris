// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // The maximum address bit of the instruction, if it is 1, it is the C instruction, if it is 0, it is the A instruction
    Not(in = instruction[15], out = isA);
    // Fetch isC again to determine whether it is a C command
    Not(in = isA, out = isC);

    // If it is a C command and the command specifies that the ALU output is stored in AR, then the ALU output is input to AR, otherwise the command is input to AR
    And(a = isC, b = instruction[5], out = isLoadAluOut);
    Mux16(a = instruction, b = outALU, sel = isLoadAluOut, out = inAR);

    // If the A instruction or instruction is specified to output to the A processor, set the load position of AR to 1.
    Or(a = isA, b = instruction[5], out = isLoadAR);
    ARegister(in = inAR, load = isLoadAR, out = outAR, out[0..14] = addressM);

    // According to the a bit field in the instruction, the output of AR or inM is input to ALU
    Mux16(a = outAR, b = inM, sel = instruction[12], out = outAM);

    // If it is a C command and write to M
    And(a = isC, b = instruction[3], out = writeM);

    // If it is a C instruction and writes to DR
    And(a = instruction[4], b = isC, out = isLoadDR); 
    DRegister(in = outALU, load = isLoadDR, out = outDR);


    And(a = isC, b = instruction[6], out = no);
    And(a = isC, b = instruction[7], out = f);
    And(a = isC, b = instruction[8], out = ny);
    And(a = isC, b = instruction[9], out = zy);
    And(a = isC, b = instruction[10], out = nx);
    And(a = isC, b = instruction[11], out = zx);

    ALU(x = outDR, y = outAM, zx = zx, nx = nx, zy = zy, ny = ny, f = f, no = no, out = outALU, out = outM, zr=zr, ng=ng);

    // Judge the jump based on the j bit field and the zr and ng bits of the ALU
    And(a = isC, b = instruction[0], out = isGT);
    And(a = isC, b = instruction[1], out = isEQ);
    And(a = isC, b = instruction[2], out = isLT);

    And(a = ng, b = isLT, out = isLtJump);
    And(a = zr, b = isEQ, out = isEqJump);

    // Is the output greater than 0
    Not(in = ng, out = notNg);
    Not(in = zr, out = notZr);
    And(a = notNg, b = notZr, out = isOutGt);
    
    And(a = isOutGt, b = isGT, out = isGtJump);

    Or(a = isLtJump, b = isEqJump, out = isJump);
    Or(a = isJump, b = isGtJump, out = jump);

    PC(in = outAR, load = jump, inc = true, reset = reset, out[0..14] = pc);    
}